# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ImageGenerator(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, prompt_enhanced: str=None, number_of_images: int=None, number_of_inference_steps: int=None, height: int=None, width: int=None, session_id: str=None, action_id: str=None):  # noqa: E501
        """ImageGenerator - a model defined in Swagger

        :param prompt_enhanced: The prompt_enhanced of this ImageGenerator.  # noqa: E501
        :type prompt_enhanced: str
        :param number_of_images: The number_of_images of this ImageGenerator.  # noqa: E501
        :type number_of_images: int
        :param number_of_inference_steps: The number_of_inference_steps of this ImageGenerator.  # noqa: E501
        :type number_of_inference_steps: int
        :param height: The height of this ImageGenerator.  # noqa: E501
        :type height: int
        :param width: The width of this ImageGenerator.  # noqa: E501
        :type width: int
        :param session_id: The session_id of this ImageGenerator.  # noqa: E501
        :type session_id: str
        :param action_id: The action_id of this ImageGenerator.  # noqa: E501
        :type action_id: str
        """
        self.swagger_types = {
            'prompt_enhanced': str,
            'number_of_images': int,
            'number_of_inference_steps': int,
            'height': int,
            'width': int,
            'session_id': str,
            'action_id': str
        }

        self.attribute_map = {
            'prompt_enhanced': 'promptEnhanced',
            'number_of_images': 'numberOfImages',
            'number_of_inference_steps': 'numberOfInferenceSteps',
            'height': 'height',
            'width': 'width',
            'session_id': 'sessionId',
            'action_id': 'actionId'
        }
        self._prompt_enhanced = prompt_enhanced
        self._number_of_images = number_of_images
        self._number_of_inference_steps = number_of_inference_steps
        self._height = height
        self._width = width
        self._session_id = session_id
        self._action_id = action_id

    @classmethod
    def from_dict(cls, dikt) -> 'ImageGenerator':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ImageGenerator of this ImageGenerator.  # noqa: E501
        :rtype: ImageGenerator
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prompt_enhanced(self) -> str:
        """Gets the prompt_enhanced of this ImageGenerator.


        :return: The prompt_enhanced of this ImageGenerator.
        :rtype: str
        """
        return self._prompt_enhanced

    @prompt_enhanced.setter
    def prompt_enhanced(self, prompt_enhanced: str):
        """Sets the prompt_enhanced of this ImageGenerator.


        :param prompt_enhanced: The prompt_enhanced of this ImageGenerator.
        :type prompt_enhanced: str
        """

        self._prompt_enhanced = prompt_enhanced

    @property
    def number_of_images(self) -> int:
        """Gets the number_of_images of this ImageGenerator.


        :return: The number_of_images of this ImageGenerator.
        :rtype: int
        """
        return self._number_of_images

    @number_of_images.setter
    def number_of_images(self, number_of_images: int):
        """Sets the number_of_images of this ImageGenerator.


        :param number_of_images: The number_of_images of this ImageGenerator.
        :type number_of_images: int
        """

        self._number_of_images = number_of_images

    @property
    def number_of_inference_steps(self) -> int:
        """Gets the number_of_inference_steps of this ImageGenerator.


        :return: The number_of_inference_steps of this ImageGenerator.
        :rtype: int
        """
        return self._number_of_inference_steps

    @number_of_inference_steps.setter
    def number_of_inference_steps(self, number_of_inference_steps: int):
        """Sets the number_of_inference_steps of this ImageGenerator.


        :param number_of_inference_steps: The number_of_inference_steps of this ImageGenerator.
        :type number_of_inference_steps: int
        """

        self._number_of_inference_steps = number_of_inference_steps

    @property
    def height(self) -> int:
        """Gets the height of this ImageGenerator.


        :return: The height of this ImageGenerator.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height: int):
        """Sets the height of this ImageGenerator.


        :param height: The height of this ImageGenerator.
        :type height: int
        """

        self._height = height

    @property
    def width(self) -> int:
        """Gets the width of this ImageGenerator.


        :return: The width of this ImageGenerator.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width: int):
        """Sets the width of this ImageGenerator.


        :param width: The width of this ImageGenerator.
        :type width: int
        """

        self._width = width

    @property
    def session_id(self) -> str:
        """Gets the session_id of this ImageGenerator.


        :return: The session_id of this ImageGenerator.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id: str):
        """Sets the session_id of this ImageGenerator.


        :param session_id: The session_id of this ImageGenerator.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def action_id(self) -> str:
        """Gets the action_id of this ImageGenerator.


        :return: The action_id of this ImageGenerator.
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id: str):
        """Sets the action_id of this ImageGenerator.


        :param action_id: The action_id of this ImageGenerator.
        :type action_id: str
        """

        self._action_id = action_id
